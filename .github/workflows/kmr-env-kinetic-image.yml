name: Kinetic Docker image

on:
  push:
    branches: master
    paths: kinetic/**
  workflow_dispatch:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # https://github.com/apache/flink/blob/master/tools/azure-pipelines/free_disk_space.sh
      - name: Free up disk space
        id: freeupspace
        run: |
          echo "Listing 10 largest packages"
          dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -n 10
          df -h
          echo "Removing large packages"
          sudo apt-get remove -y '^ghc-9.*' || true
          sudo apt-get remove -y '^ghc-8.*' || true
          sudo apt-get remove -y '^dotnet-.*' || true
          sudo apt-get remove -y '^llvm-.*' || true
          sudo apt-get remove -y 'php.*' || true
          sudo apt-get remove -y azure-cli google-cloud-sdk hhvm google-chrome-stable firefox powershell mono-devel monodoc-http || true
          sudo apt-get autoremove -y
          sudo apt-get clean
          df -h
          echo "Removing large directories"
          # deleting 15GB
          rm -rf /usr/share/dotnet/
          df -h

      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=ghcr.io/km-robotics/env-kinetic
          VERSION=edge
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi
          echo ::set-output name=tags::${TAGS}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to ghcr
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.ghcr_TOKEN }}

#      - name: Test
#        id: docker_test
#        uses: docker/build-push-action@v2
#        with:
#          builder: ${{ steps.buildx.outputs.name }}
#          context: ./app
#          file: ./app/Dockerfile
#          target: test

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./kinetic/docker
          file: ./kinetic/docker/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.tags }}
          cache-from: type=registry,ref=user/app:latest
          cache-to: type=inline
